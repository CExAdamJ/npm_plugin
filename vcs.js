const Common   = require('./common.js');


let reg_exp  = /([0-9A-Fa-f]*)\s+\((.*)\s+(\d+)\)/
let name_exp = /(.*)\s+([0-9\:\s\-]{19})\s((\+|\-)\d{4})/


/**
 * vcs module manage git related
 * @module npm_plugin/vcs
 */
module.exports = {
    /**
     * generate current git hash
     * @param  {string} root_path - The root directory to perform the scan (default to current)
     * @return {string|null}      - return git hash as a string if found, null otherwise
     */
    getHash: function(root_path) {
        try{
            var git_hash = Common.systemSync('git rev-parse HEAD', root_path);
            return git_hash;
        }
        catch(error){
            console.error(error)
            return null
        }
    },


    /**
     * generate current git url
     * @param  {string} root_path - The root directory to perform the scan (default to current)
     * @return {string|null}      - return git url as a string if found, null otherwise
     */
    getURL: function(root_path) {
        try{
            var git_url = Common.systemSync('git config --get remote.origin.url', root_path);
            return git_url;
        }
        catch(error){
            console.error(error)
            return null
        }
    },


    /**
     * generate current git url
     * @param  {string} root_path - The root directory to perform the scan (default to current)
     * @param  {string} is_linux  - If the system is on linux or windows
     * @return {string|null}      - return project name as a string if found, null otherwise
     */
    getProject: function(root_path, is_linux) {
        try{
            var project_name = Common.systemSync('git rev-parse --show-toplevel', root_path);
            if(is_linux){ return project_name.split('/').slice(-1)[0]; }
            else { return project_name.split('\\').slice(-1)[0];}
        }
        catch(error){
            console.error(error)
            return null
        }
    },


    /**
     * generate blame list for all file
     * @param  {string} root_path - The root directory to perform the scan (default to current)
     * @param  {json}   root_json - The complete list of js file within root
     * @return {json|null}        - return list of blame as a json if found, null otherwise
     */
    getBlame: function(root_path, root_json) {
        try{
            var blame_info = {}
            blame_info['package_json'] = Common.systemSync('git blame -l ' + root_path + '/package.json', root_path);
            Object.keys(root_json).forEach(path =>{
                root_json[path].forEach( file => {
                    blame_info[path + file] = Common.systemSync('git blame -l ' + path + file, root_path);
                });
            });
            return blame_info;
        }
        catch(error){
            console.error(error)
            return null
        }
    },


    /**
     * generate blame json given a raw line information
     * @param  {string} line_info - A string of line information provided by git blame
     * @return {json}             - return a parsed blame as a json
     */
    genBlame: function(line_info){
        var blame     = {}
        var line_list = reg_exp.exec(line_info);
        if(!line_list){ return null; }
        blame['hash'] = line_list[1];
        blame['line'] = line_list[3];
        var name_list = name_exp.exec(line_list[2]);
        if(!name_list){ return null; }
        blame['name'] = name_list[1].trim();
        blame['time'] = name_list[2] + ' ' + name_list[3]
        return blame;
    },


    /**
     * generate a list of relevant blame given a complete blame info and dependency list
     * @param  {string[]} raw_blame - A list of string blame information generated by git
     * @param  {string[]} dep_list  - A list of dependency name found in the package json
     * @return {json}               - return a list of parsed blame
     */
    parseBlm: function(raw_blame, dep_list){

        if ((raw_blame == null) || (dep_list == null)) return null;

        var dep_list = Object.keys(dep_list);
        var blm_list = raw_blame['package_json'].split('\n');
        var result   = {};
        var i = 0;

        for(var line in blm_list){
            if (blm_list[line].includes(dep_list[i])){
                result[dep_list[i]] = this.genBlame(blm_list[line]);
                i++;
            }
        }

        return result
    }
};



